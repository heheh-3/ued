4)CALCULATOR

import React, { useState } from "react";
import "./App.css";
function App() {
  const [input, setInput] = useState("");

  const handleClick = (value) => {
    setInput(input + value);
  };

  const clearInput = () => {
    setInput("");
  };

  const calculateResult = () => {
    try {
      setInput(eval(input).toString()); 
    } catch (error) {
      setInput("Error");
    }
  };

  return (
    <div className="calculator">
      <h2>React Calculator</h2>
      <input type="text" value={input} readOnly />
      <div className="buttons">
        {["7", "8", "9", "/", "4", "5", "6", "*", "1", "2", "3", "-", "0", ".", "=", "+"].map(
          (btn) =>
            btn === "=" ? (
              <button key={btn} onClick={calculateResult}>
                {btn}
              </button>
            ) : (
              <button key={btn} onClick={() => handleClick(btn)}>
                {btn}
              </button>
            )
        )}
        <button className="clear" onClick={clearInput}>
          C
        </button>
      </div>
    </div>
  );
}
export default App;

.calculator {
  width: 300px;
  margin: 50px auto;
  text-align: center;
  padding: 20px;
  background: #f4f4f4;
  border-radius: 10px;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
}

input {
  width: 90%;
  padding: 10px;
  font-size: 20px;
  text-align: right;
  margin-bottom: 10px;
  border: 1px solid #ccc;
}

.buttons {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 5px;
}

button {
  padding: 15px;
  font-size: 18px;
  border: none;
  cursor: pointer;
  background: #ddd;
  transition: 0.3s;
}

button:hover {
  background: #bbb;
}

.clear {
  background: red;
  color: white;
  grid-column: span 4;
}

--------------------------------------------------------------------------------------

5)VOTER APPLICATION

import React, { useState } from "react";
import "./App.css";
function App() {
  const candidates = ["Alice", "Bob", "Charlie"];
  const [votes, setVotes] = useState({ Alice: 0, Bob: 0, Charlie: 0 });
  const handleVote = (candidate) => {
    setVotes({ ...votes, [candidate]: votes[candidate] + 1 });
  };
  return (
    <div className="voting-app">
      <h2>Voting Application</h2>
      <div className="candidates">
        {candidates.map((candidate) => (
          <div key={candidate} className="candidate">
            <h3>{candidate}</h3>
            <p>Votes: {votes[candidate]}</p>
            <button onClick={() => handleVote(candidate)}>Vote</button>
          </div>
        ))}
      </div>
    </div>
  );
}
export default App;

.voting-app {
  width: 350px;
  margin: 50px auto;
  text-align: center;
  padding: 20px;
  background: #f4f4f4;
  border-radius: 10px;
  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
}

.candidates {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.candidate {
  background: #fff;
  padding: 10px;
  border-radius: 5px;
  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
}

button {
  background-color: #28a745;
  color: white;
  border: none;
  padding: 8px;
  cursor: pointer;
  border-radius: 5px;
}

button:hover {
  background-color: #218838;
}

---------------------------------------------------------------------------------------------

7)BIRTHDAY REMAINDER

import React, { useState, useEffect } from "react";
import "./App.css";
const BirthdayReminder = () => {
    const [birthdays, setBirthdays] = useState([
        { id: 1, name: "John Doe", date: "2024-03-10" },
        { id: 2, name: "Jane Smith", date: "2024-05-15" },
    ]);
    const [newName, setNewName] = useState("");
    const [newDate, setNewDate] = useState("");
    const [popup, setPopup] = useState(null);
    const addBirthday = () => {
        if (newName && newDate) {
            setBirthdays([...birthdays, { id: Date.now(), name: newName, date: newDate }]);
            setNewName("");
            setNewDate("");
        }
    };
    const removeBirthday = (id) => {
        setBirthdays(birthdays.filter((bday) => bday.id !== id));
    };
    
    useEffect(() => {
        const today = new Date().toISOString().split("T")[0];
        const upcomingBday = birthdays.find((bday) => bday.date === today);
        if (upcomingBday) {
            setPopup(`ðŸŽ‰ Happy Birthday ${upcomingBday.name}! ðŸŽ‚`);
            setTimeout(() => setPopup(null), 3000);
        }
    }, [birthdays]);
    return (
        <div className="app">
            <h2>ðŸŽˆ Birthday Reminder</h2>
            {popup && <div className="popup">{popup}</div>}
            <div className="input-container">
                <input 
                    type="text" 
                    placeholder="Enter Name" 
                    value={newName} 
                    onChange={(e) => setNewName(e.target.value)} 
                />
                <input 
                    type="date" 
                    value={newDate} 
                    onChange={(e) => setNewDate(e.target.value)} 
                />
                <button onClick={addBirthday}>Add Birthday</button>
            </div>
            <div className="birthday-list">
                {birthdays.map((bday) => (
                    <div key={bday.id} className="birthday-item">
                        <span>{bday.name} - {bday.date}</span>
                        <button onClick={() => removeBirthday(bday.id)}>Remove</button>
                    </div>
                ))}
            </div>
            
        </div>
    );
};
export default BirthdayReminder;

.app {
    text-align: center;
    font-family: Arial, sans-serif;
    max-width: 400px;
    margin: 50px auto;
    padding: 20px;
    border-radius: 10px;
    background: #f9f9f9;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

h2 {
    color: #ff6600;
}

.input-container {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-bottom: 20px;
}

input, button {
    padding: 10px;
    font-size: 16px;
    border-radius: 5px;
    border: 1px solid #ddd;
}

button {
    background-color: #ff6600;
    color: white;
    cursor: pointer;
    border: none;
}

button:hover {
    background-color: #e65c00;
}

.birthday-list {
    margin-top: 20px;
}

.birthday-item {
    display: flex;
    justify-content: space-between;
    background: white;
    padding: 10px;
    margin: 5px 0;
    border-radius: 5px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.popup {
    background-color: #ffcc00;
    padding: 10px;
    border-radius: 5px;
    font-weight: bold;
    margin-bottom: 10px;
}

.process-btn {
    margin-top: 15px;
    width: 100%;
}
